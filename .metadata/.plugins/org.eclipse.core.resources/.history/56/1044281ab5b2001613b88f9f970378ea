import java.io.*;
import java.util.*;
public class Estacionamento {
	static char			ativo;
	static String		codEst;
	static String		placa;
	static char			tipoOperacao;
	static String		codMarca;
	static String		modeloCor;
	static String		categoriaVeiculo;
	static String		dataOperacao;
	static String		horaEntrada;
	static String		horaSaida;
	static float		valorPago;
	
	
	static RandomAccessFile arquivo;
	static Scanner 	leia = new Scanner(System.in);
	
	
	public long pesquisarVeiculoPorCodigo(String codEstPesquisa) {	
		// método para localizar um registro no arquivo em disco
		long posicaoCursorArquivo = 0;
		try { 
		    RandomAccessFile arquivo = new RandomAccessFile("ESTACIONAMENTO.DAT", "rw");
		    while (true) {
		    	posicaoCursorArquivo  = arquivo.getFilePointer();	// posição do início do registro no arquivo
		    	ativo		 = arquivo.readChar();
		    	codEst       = arquivo.readUTF();
		    	placa        = arquivo.readUTF();
		    	tipoOperacao = arquivo.readChar();
		    	codMarca     = arquivo.readUTF();
		    	modeloCor    = arquivo.readUTF();
		    	categoriaVeiculo = arquivo.readUTF();
		    	dataOperacao = arquivo.readUTF();
		    	horaEntrada  = arquivo.readUTF();
		    	horaSaida    = arquivo.readUTF();
		    	valorPago    = arquivo.readFloat();
				 
				if ( codEstPesquisa.equals(codEst) && ativo == 'S') {
					arquivo.close();
					return posicaoCursorArquivo;
				}
			}
		}catch (EOFException e) {
			return -1; // registro não foi encontrado
		}catch (IOException e) { 
			System.out.println("Erro na abertura do arquivo  -  programa será finalizado");
			System.exit(0);
			return -1;
	 	}
	}

	public void salvarVeiculoEstacionamento() {	
		// método para incluir um novo registro no final do arquivo em disco
		try {
			RandomAccessFile arquivo = new RandomAccessFile("ESTACIONAMENTO.DAT", "rw");
	
			arquivo.seek(arquivo.length());  // posiciona o ponteiro no final do arquivo (EOF)
			arquivo.writeChar(ativo);
			arquivo.writeUTF(codEst);
			arquivo.writeUTF(placa);
		    arquivo.writeChar(tipoOperacao);
		    arquivo.writeUTF(codMarca);
		    arquivo.writeUTF(modeloCor);
		    arquivo.writeUTF(categoriaVeiculo);
		    arquivo.writeUTF(dataOperacao);
		    arquivo.writeUTF(horaEntrada);
		    arquivo.writeUTF(horaSaida);
		    arquivo.writeFloat(valorPago);
		    arquivo.close();
	    	System.out.println("Dados gravados com sucesso !\n");
	    }catch (IOException e) { 
			System.out.println("Erro na abertura do arquivo  -  programa será finalizado");
			System.exit(0);
	 	}
	}

	public void desativarVeiculoEstacionamento(long posicao)	{    
		// método para alterar o valor do campo ATIVO para N, tornando assim o registro excluído
		try {
			RandomAccessFile arquivo = new RandomAccessFile("ESTACIONAMENTO.DAT", "rw");
			
			arquivo.seek(posicao);
			arquivo.writeChar('N');   // desativar o registro antigo
		    arquivo.close();
	    }catch (IOException e) { 
	    	System.out.println("Erro na abertura do arquivo  -  programa será finalizado");
	    	System.exit(0);
	    }

	}
	
	public void entradaVeiculo() { //Inclusão
		//gerar código sequencial
		String maiorCodEst = "000000";
		try{
			RandomAccessFile arquivo = new RandomAccessFile("ESTACIONAMENTO.DAT", "rw");
			while (true){
				ativo		 = arquivo.readChar();
		    	codEst       = arquivo.readUTF();
		    	placa        = arquivo.readUTF();
		    	tipoOperacao = arquivo.readChar();
		    	codMarca     = arquivo.readUTF();
		    	modeloCor    = arquivo.readUTF();
		    	categoriaVeiculo = arquivo.readUTF();
		    	dataOperacao = arquivo.readUTF();
		    	horaEntrada  = arquivo.readUTF();
		    	horaSaida    = arquivo.readUTF();
		    	valorPago    = arquivo.readFloat();
		    	if (Integer.parseInt(codEst) > Integer.parseInt(maiorCodEst)){
		    		maiorCodEst = codEst;
		    	}
			}
		}catch(EOFException e){
			codEst = String.valueOf( Integer.parseInt(maiorCodEst) + 1 );
			while (codEst.length() < 6){
				codEst = "0" + codEst;
			}
		}catch (IOException e) { 
	    	System.out.println("Erro na abertura do arquivo  -  programa será finalizado");
	    	System.exit(0);
		}
		System.out.print("Código de Estacionamento: " + codEst);
		ativo = 'S';
		//Digitar os campos e confirmar a gravação dos dados
	}
	
	public void saidaVeiculo() { //Alteração
		
	}

	
	public void excluir(){
		
	}
	
	public void relatorioFaturamento (){
		
	}
	/****************** Metodos Principais *************************/
	// Metodo de consulta de veículos
	
	/*
	 *O programa de consulta deverá apresentar na tela os dados dos veículos com as seguintes opções:
		1 - Exibir todos os registros
		2 - Exibir somente os veículos que ainda não saíram do estacionamento
		3 - Exibir os registros cadastrados em uma Data informada
	
	Exemplo de layout da consulta:
	
	Placa          OP  Desc. veículo         Desc.Marca      Categoria     Data            Hr Entr    Hr Saída     Vlr Pago
	------------  --- ---------------------  --------------  ------------  --------------  ---------  -----------  ----------
	ABC1111   		E   Palio cinza             Fiat	      PN	         01/03/2014     10:20	
	XYZ2222   		S   Gol vermelho           Volkswagen     PN	         12/02/2014     12:15       13:15       7,00	

	 */
	 public static void consultar (){
		 byte escolha = -1;
		 boolean encontrouAlgumRegistro = false;
		 System.out.println("****************** PROGRAM DE CONSULTA ******************");
		 
		 do {
			 System.out.println("Escolha a opção que deseja realizar, digite 0 para sair.");
			 System.out.println("\n[ 1 ] Exibir todos os registros");
			 System.out.println("[ 2 ] Exibir somente os veículos que ainda não saíram do estacionamento");
			 System.out.println("[ 3 ] Exibir somente os veículos cadastrados em uma data específica");
			 System.out.print("\nO que deseja fazer?: ");
			 escolha = leia.nextByte();
			 
			 if (escolha < 0){
				 System.out.println("Opção Inválida. Digite novamente.");
			 }else if (escolha == 0){
				 System.out.println("Até mais...");
				 break;
			 }
		 }while(escolha < 0);
		 
		 switch (escolha){
		 case 1:
			 try{ 
				 arquivo = new RandomAccessFile("estacionamento.dat", "rw");
				 arquivo.seek(0); // garantir que esteja na posicao 0 na primeira rodada
				 while (true){
					 
					 ativo		 = arquivo.readChar();
			    	 codEst       = arquivo.readUTF();
			    	 placa        = arquivo.readUTF();
			    	 tipoOperacao = arquivo.readChar();
			    	 codMarca     = arquivo.readUTF();
			    	 modeloCor    = arquivo.readUTF();
			    	 categoriaVeiculo = arquivo.readUTF();
			    	 dataOperacao = arquivo.readUTF();
			    	 horaEntrada  = arquivo.readUTF();
			    	 horaSaida    = arquivo.readUTF();
			    	 valorPago    = arquivo.readFloat();
					 if (ativo == 'S'){
						 relatorioHeader();
						 // quando tivermos os dados podemos testar o posicionamento dos dados
						 System.out.print(codEst + placa + tipoOperacao + 
								 codMarca + modeloCor + categoriaVeiculo + 
								 dataOperacao + horaEntrada + horaSaida + valorPago);
						 			
					 }
					 
					 if (arquivo.getFilePointer() == arquivo.length()){
						 break;
					 }
				 }
				 
				 arquivo.close();
				 
			 }catch (EOFException e){

				 System.out.println("Não foi encontrado nenhum registro.");
			 }catch (IOException e){
				 System.out.println("Ocorreu um erro ao tentar abrir o arquivo. Finalizando o programa.");
				 System.exit(0);
			 }
			 break;
		 case 2:
			 try{ 
				 arquivo = new RandomAccessFile("estacionamento.dat", "rw");
				 arquivo.seek(0); // garantir que esteja na posicao 0 na primeira rodada
				 while (true){
					 
					 ativo		 = arquivo.readChar();
			    	 codEst       = arquivo.readUTF();
			    	 placa        = arquivo.readUTF();
			    	 tipoOperacao = arquivo.readChar();
			    	 codMarca     = arquivo.readUTF();
			    	 modeloCor    = arquivo.readUTF();
			    	 categoriaVeiculo = arquivo.readUTF();
			    	 dataOperacao = arquivo.readUTF();
			    	 horaEntrada  = arquivo.readUTF();
			    	 horaSaida    = arquivo.readUTF();
			    	 valorPago    = arquivo.readFloat();
			    	 
					 if (ativo == 'S' && horaSaida == ""){
						 relatorioHeader();
						 // quando tivermos os dados podemos testar o posicionamento dos dados
						 System.out.print(codEst + placa + tipoOperacao + 
								 codMarca + modeloCor + categoriaVeiculo + 
								 dataOperacao + horaEntrada + horaSaida + valorPago);
						 			
					 }
					 
					 if (arquivo.getFilePointer() == arquivo.length()){
						 break;
					 }
				 }
				 
				 arquivo.close();
				 
			 }catch (EOFException e){

				 System.out.println("Não foi encontrado nenhum registro.");
			 }catch (IOException e){
				 System.out.println("Ocorreu um erro ao tentar abrir o arquivo. Finalizando o programa.");
				 System.exit(0);
			 }
			 break;
		 case 3:
			 
			 String data = "";
			 do {
				 System.out.print("Digite a data para gerar relatório: ");
				 data = leia.next();
				 if (!validaData()){
					 System.out.println("Data inválida.");
				 }
			 }while (!validaData());
			 try{ 
				 arquivo = new RandomAccessFile("estacionamento.dat", "rw");
				 arquivo.seek(0); // garantir que esteja na posicao 0 na primeira rodada
				 while (true){
					 
					 ativo		  = arquivo.readChar();
			    	 codEst       = arquivo.readUTF();
			    	 placa        = arquivo.readUTF();
			    	 tipoOperacao = arquivo.readChar();
			    	 codMarca     = arquivo.readUTF();
			    	 modeloCor    = arquivo.readUTF();
			    	 categoriaVeiculo = arquivo.readUTF();
			    	 dataOperacao = arquivo.readUTF();
			    	 horaEntrada  = arquivo.readUTF();
			    	 horaSaida    = arquivo.readUTF();
			    	 valorPago    = arquivo.readFloat();
			    	 
					 if (ativo == 'S' && dataOperacao == data){
						 relatorioHeader();
						 // quando tivermos os dados podemos testar o posicionamento dos dados
						 System.out.print(codEst + placa + tipoOperacao + 
								 codMarca + modeloCor + categoriaVeiculo + 
								 dataOperacao + horaEntrada + horaSaida + valorPago);
						 			
					 }
					 
					 if (arquivo.getFilePointer() == arquivo.length()){
						 break;
					 }
				 }
				 
				 arquivo.close();
				 
			 }catch (EOFException e){

				 System.out.println("Não foi encontrado nenhum registro.");
			 }catch (IOException e){
				 System.out.println("Ocorreu um erro ao tentar abrir o arquivo. Finalizando o programa.");
				 System.exit(0);
			 }
			 break;
		 }
		 
		
		 
	 }
	 public static void relatorioHeader () {
		// Estrutura do relatório de pesquisa
		System.out.println("Placa\tOP  Veículo\tMarca\tCategoria    Data\tHr.Entrada   Hr.Saída\tValor Pago");
		System.out.println("-----\t--  -----------\t-------\t-----------  ---------  ----------   ---------\t----------");
	 }
	 public static long pesquisaVeiculo (){
		return 00000;
	 }

	public static boolean validaData (){
		return true;
	}
}
